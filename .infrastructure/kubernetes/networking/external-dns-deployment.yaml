apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
rules:
- apiGroups: [""]
  resources: ["services","endpoints","pods"]
  verbs: ["get","watch","list"]
- apiGroups: ["extensions","networking.k8s.io"]
  resources: ["ingresses"] 
  verbs: ["get","watch","list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
- kind: ServiceAccount
  name: external-dns
  namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: external-dns
  template:
    metadata:
      labels:
        app: external-dns
    spec:
      serviceAccountName: external-dns
      containers:
      - name: external-dns
        image: k8s.gcr.io/external-dns/external-dns:v0.12.0
        args:
        - --source=service
        - --source=ingress
        # - --domain-filter=rhododevdron.dk # (optional) limit to only example.com domains; change to match the zone created above.
        # - --provider=azure
        # - --azure-resource-group=itu-minitwit-rg # (optional) use the DNS zones from the tutorial's resource group
        - --provider=digitalocean
        env:
          - name: DO_TOKEN
            valueFrom:
              secretKeyRef:
                name: digitalocean-token-secret
                key: token
                optional: false
#         volumeMounts:
#         - name: external-dns-config-file
#           mountPath: /etc/kubernetes
#           readOnly: true
#       volumes:
#       - name: external-dns-config-file
#         secret:
#           secretName: external-dns-config-file
#           items:
#           - key: external-dns-secret.json
#             path: azure.json 