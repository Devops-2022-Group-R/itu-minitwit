version: 2.1

defaults: &defaults
  working_directory: /tmp/workdir

jobs:
  build_and_test:
    working_directory: ~/repo
    docker:
      - image: circleci/golang:1.17-buster
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Install Dependencies
          command: go mod download
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Run tests
          command: |
            mkdir -p /tmp/test-reports
            gotestsum --junitfile /tmp/test-reports/unit-tests.xml
      - store_test_results:
          path: /tmp/test-reports

  push_to_docker_hub:
    <<: *defaults
    docker:
      - image: circleci/golang:1.17-buster
    steps:
      - checkout

      - attach_workspace:
          at: /tmp/workdir/workspace
      - run: cat workspace/shared_vars >> $BASH_ENV

      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true

      - run: |
          TAG=0.1.$CIRCLE_BUILD_NUM
          IMAGE_PATH=$DOCKER_USERNAME/itu-minitwit-server

          docker build -t $IMAGE_PATH:$TAG .
          docker tag $IMAGE_PATH:$TAG $IMAGE_PATH:latest

          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $IMAGE_PATH:$TAG
          docker push $IMAGE_PATH:latest

  # Based on: http://www.tiernok.com/posts/2021/integrating-terraform-into-circleci-aspnet-azure-pipeline/
  apply_infrastructure:
    docker:
      - image: zenika/terraform-azure-cli:latest
    steps:
      - checkout

      - run:
          name: terraform apply
          command: |
            cd .infrastructure

            # Adding these variables authenticates us with Azure as a service principal.
            # Reference: https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret
            export ARM_CLIENT_ID=$AZURE_SP_APPID
            export ARM_CLIENT_SECRET=$AZURE_SP_PASSWORD
            export ARM_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID
            export ARM_TENANT_ID=$AZURE_TENANT

            terraform init

            terraform apply \
              -var "prefix=itu-minitwit" \
              -var "database_admin_username=$DB_ADMIN_USERNAME" \
              -var "database_admin_password=$DB_ADMIN_PASSWORD" \
              -var "database_server_name=$DB_SERVER_NAME" \
              -var "database_db_name=$DB_NAME"

  var_test:
    <<: *defaults
    docker:
      - image: circleci/golang:1.17-buster
    steps:
      - run:
          name: "pass var to other job"
          command: |
            mkdir -p workspace

            echo 'export TEST_VAR=my_value_here' >> workspace/shared_vars
      - persist_to_workspace:
          root: workspace
          paths:
              - workspace/shared_vars

  # Based on: https://circleci.com/blog/publishing-to-github-releases-via-circleci/
  publish_github_release:
    <<: *defaults
    docker:
      - image: circleci/golang:1.17-buster
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: cat /tmp/workspace/shared_vars >> $BASH_ENV
      - run: cat /tmp/workspace/shared_vars
      - run:
          name: "Create a new GitHub release"
          command: |
            echo $TEST_VAR
            # go install github.com/Devops-2022-Group-R/bump-tool@latest

            # GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)

            # echo "Creating release the folloing info:"
            # echo "  - Commit message: $GIT_COMMIT_DESC"
            # echo "  - Owner:          $CIRCLE_PROJECT_USERNAME"
            # echo "  - Repository:     $CIRCLE_PROJECT_REPONAME"
            # VERSION=$(
            #   bump-tool \
            #     --token ${GITHUB_TOKEN} \
            #     --owner ${CIRCLE_PROJECT_USERNAME} \
            #     --repo ${CIRCLE_PROJECT_REPONAME} \
            #     --commitMsg "$GIT_COMMIT_DESC" \
            #     --shouldLog=false
            # )
            # echo "Will create release with version $VERSION"

            # go install github.com/tcnksm/ghr@latest

            # ghr \
            #   -t ${GITHUB_TOKEN} \
            #   -u ${CIRCLE_PROJECT_USERNAME} \
            #   -r ${CIRCLE_PROJECT_REPONAME} \
            #   -c ${CIRCLE_SHA1} \
            #   -delete \
            #   ${VERSION}

workflows:
  build_test_deploy:
    jobs:
      - var_test
      - publish_github_release:
          context: ITU MiniTwit
          # filters:
          #   branches:
          #     only:
          #       - master
          requires:
            - var_test

      # - build_and_test

      # - push_to_docker_hub:
      #     requires:
      #       - build_and_test
      #     context: ITU MiniTwit
      #     filters:
      #       branches:
      #         only:
      #           - master

      # - apply_infrastructure:
      #     requires:
      #       - push_to_docker_hub
      #     context: ITU MiniTwit
      #     filters:
      #       branches:
      #         only:
      #           - master
