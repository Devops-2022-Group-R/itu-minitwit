version: 2.1

orbs: 
  snyk: snyk/snyk@1.1.2
  azure-aks: circleci/azure-aks@0.2.1
  kubernetes: circleci/kubernetes@0.4.0
  changelog: onimur/github-changelog-generator@2.1.9

orb_tagged_filters: &orb_tagged_filters
  branches:
    ignore: /.*/
  tags:
    only: /^\d+\.\d+\.\d+$/ #for tag 1.2.3

defaults: &defaults
  working_directory: /tmp/workdir

jobs:
  build_and_test:
    working_directory: ~/repo
    docker:
      - image: circleci/golang:1.17-buster
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Install Dependencies
          command: go mod download
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Run tests
          command: |
            mkdir -p /tmp/test-reports
            gotestsum --junitfile /tmp/test-reports/unit-tests.xml
      - store_test_results:
          path: /tmp/test-reports

  lint:
    docker:
      - image: circleci/golang:1.17-buster
    steps:
      - checkout

      - run:
          name: Lint Go project
          command: |
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.45.0
            golangci-lint run

  push_to_docker_hub:
    <<: *defaults
    docker:
      - image: circleci/golang:1.17-buster
    steps:
      - checkout

      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Import variables from other jobs
          command: cat /tmp/workspace/shared_vars >> $BASH_ENV

      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true

      - run:
          name: Build and push image
          command: |
            TAG=$VERSION
            IMAGE_PATH=$DOCKER_USERNAME/itu-minitwit-server

            echo "Building docker image $IMAGE_PATH:$TAG"

            docker build -t $IMAGE_PATH:$TAG .
            docker tag $IMAGE_PATH:$TAG $IMAGE_PATH:latest

            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push $IMAGE_PATH:$TAG
            docker push $IMAGE_PATH:latest

  push_monitoring_to_docker_hub:
    <<: *defaults
    docker:
      - image: circleci/golang:1.17-buster
    steps:
      - checkout

      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Import variables from other jobs
          command: cat /tmp/workspace/shared_vars >> $BASH_ENV

      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true

      - run:
          name: Build and push image
          command: |
            TAG=$VERSION
            PROMETHEUS_IMAGE_PATH=$DOCKER_USERNAME/itu-minitwit-monitoring-prometheus
            GRAFANA_IMAGE_PATH=$DOCKER_USERNAME/itu-minitwit-monitoring-grafana

            echo "Building docker image $PROMETHEUS_IMAGE_PATH:$TAG"
            docker build -t $PROMETHEUS_IMAGE_PATH:$TAG --build-arg PROMETHEUS_YML=prometheus-prod.yml ./monitoring/prometheus
            docker tag $PROMETHEUS_IMAGE_PATH:$TAG $PROMETHEUS_IMAGE_PATH:latest

            echo "Building docker image $GRAFANA_IMAGE_PATH:$TAG"
            docker build -t $GRAFANA_IMAGE_PATH:$TAG ./monitoring/grafana
            docker tag $GRAFANA_IMAGE_PATH:$TAG $GRAFANA_IMAGE_PATH:latest

            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push $PROMETHEUS_IMAGE_PATH:$TAG
            docker push $PROMETHEUS_IMAGE_PATH:latest
            docker push $GRAFANA_IMAGE_PATH:$TAG
            docker push $GRAFANA_IMAGE_PATH:latest

  # Based on: http://www.tiernok.com/posts/2021/integrating-terraform-into-circleci-aspnet-azure-pipeline/
  apply_infrastructure:
    docker:
      - image: zenika/terraform-azure-cli:latest
    steps:
      - checkout

      - run:
          name: terraform apply
          command: |
            cd .infrastructure

            # Adding these variables authenticates us with Azure as a service principal.
            # Reference: https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret
            export ARM_CLIENT_ID=$AZURE_SP_APPID
            export ARM_CLIENT_SECRET=$AZURE_SP_PASSWORD
            export ARM_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID
            export ARM_TENANT_ID=$AZURE_TENANT

            terraform init

            terraform apply \
              -var "prefix=itu-minitwit" \
              -auto-approve

  apply_kubernetes:
    <<: *defaults 
    executor: azure-aks/default
    steps:
      - checkout

      - attach_workspace:
          at: /tmp/workspace
      
      - run:
          name: Import variables from other jobs
          command: cat /tmp/workspace/shared_vars >> $BASH_ENV

      - azure-aks/update-kubeconfig-with-credentials:
          cluster-name: itu-minitwit-cluster
          install-kubectl: true
          perform-login: true
          resource-group: itu-minitwit-rg

      - run:
          command: |
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

            cd .infrastructure/kubernetes
            chmod +x apply.sh
            ./apply.sh

            kubectl set image deployment itu-minitwit-backend itu-minitwit-backend=kongborup/itu-minitwit-server:$VERSION -n itu-minitwit-backend-ns
            kubectl set image deployment itu-minitwit-monitoring-grafana itu-minitwit-monitoring-grafana=kongborup/itu-minitwit-monitoring-grafana:$VERSION -n itu-minitwit-monitoring-ns
            kubectl set image deployment itu-minitwit-monitoring-prometheus itu-minitwit-monitoring-prometheus=kongborup/itu-minitwit-monitoring-prometheus:$VERSION -n itu-minitwit-monitoring-ns
          name: Deploy cluster 

  # Based on: https://circleci.com/blog/publishing-to-github-releases-via-circleci/
  publish_github_release:
    <<: *defaults
    docker:
      - image: circleci/golang:1.17-buster
    steps:
      - checkout

      - run:
          name: "Create a new GitHub release"
          command: |
            go install github.com/Devops-2022-Group-R/bump-tool@latest

            GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)

            echo "Creating release the folloing info:"
            echo "  - Commit message: $GIT_COMMIT_DESC"
            echo "  - Owner:          $CIRCLE_PROJECT_USERNAME"
            echo "  - Repository:     $CIRCLE_PROJECT_REPONAME"
            VERSION=$(
              bump-tool \
                --token ${GITHUB_TOKEN} \
                --owner ${CIRCLE_PROJECT_USERNAME} \
                --repo ${CIRCLE_PROJECT_REPONAME} \
                --commitMsg "$GIT_COMMIT_DESC" \
                --shouldLog=false
            )

            mkdir -p workspace
            echo "export VERSION=$VERSION" >> workspace/shared_vars
            echo "Will create release with version $VERSION"

            go install github.com/tcnksm/ghr@latest

            ghr \
              -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -delete \
              ${VERSION}

      - persist_to_workspace:
          root: workspace
          paths:
              - shared_vars

  check_gocyclo:
    working_directory: ~/repo
    docker:
      - image: circleci/golang:1.17-buster
    steps:
      - checkout

      - run:
          name: "Check cyclomatic complexity"
          command: |
            go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
            MAX_CYCLO=$(echo $(gocyclo -top 1 src/) | head -n1 | cut -d " " -f1) # Get cyclomatic complexity - first word
            CYCLO_LIMIT=15

            if [ $MAX_CYCLO -ge $CYCLO_LIMIT ]; then
              echo "These functions have a cyclomatic complexity of at least $CYCLO_LIMIT!"
              gocyclo -over $((CYCLO_LIMIT-1)) src/
              exit 1
            fi

  check_snyk:
    docker:
      - image: circleci/golang:1.17-buster
    environment:
      IMAGE_NAME: itu-minitwit-server
    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true

      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME .
      - snyk/scan:
          docker-image-name: $IMAGE_NAME
          project: '${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}-container'
          severity-threshold: medium
          target-file: Dockerfile
          token-variable: SNYK_TOKEN
    
  # generate_changelog:
  #   - changelog/changelog-default:
  #       steps:
  #         - checkout

  #       context: ITU MiniTwit           # Case contain your Github Token
  #       token:  ${GITHUB_TOKEN}         # Token as env_var
  #       git-push: false                 # The changelog will be stored in /tmp/.persist/persist/ and can be retrieved using: - attach_workspace: at: tmp //https://circleci.com/docs/2.0/configuration-reference/#example-7
  #       #Push the changelog to remote repository manually
  #       # post-steps:
  #         # - run:
  #         #     command: |
  #         #       git config user.name "BotUsername"
  #         #       git config user.email "bot@email.com"
  #         #       git add CHANGELOG.md
  #         #       git commit -m "Your description [skip ci]"
  #         #       git push -q https://$<<parameters.token>>@github.com/YourUser/YourProjectName.git master
  #       filters: *orb_tagged_filters    # Trigger to only tag

workflows:
  tagged-publish: # run job for all tags
    jobs:
      - changelog/changelog-default:
          pre-steps:
            - checkout
          context: ITU MiniTwit           # Case contain your Github Token
          token: ${GITHUB_TOKEN}              # Token as env_var
          git-push: false                 # The changelog will be stored in /tmp/.persist/persist/ and can be retrieved using: - attach_workspace: at: tmp //https://circleci.com/docs/2.0/configuration-reference/#example-7
          #Push the changelog to remote repository manually
          post-steps:
            - run:
                command: |
                  echo "just testing"
      
          filters: *orb_tagged_filters    # Trigger to only tag
                  # git config user.name "BotUsername"
                  # git config user.email "bot@email.com"
                  # git add CHANGELOG.md
                  # git commit -m "Your description [skip ci]"
                  # git push -q https://$<<parameters.token>>@github.com/YourUser/YourProjectName.git master

  # tagged-publish:
  #   jobs: 
  #     - generate_changelog  

  # build_test_deploy:
  #   jobs:
  #     - build_and_test

  #     - lint

  #     - check_gocyclo

  #     - check_snyk

  #     - publish_github_release:
  #         context: ITU MiniTwit
  #         filters:
  #           branches:
  #             only:
  #               - master
  #         requires:
  #           - build_and_test
  #           - check_snyk

  #     - push_to_docker_hub:
  #         requires:
  #           - publish_github_release
  #         context: ITU MiniTwit
  #         filters:
  #           branches:
  #             only:
  #               - master

  #     - push_monitoring_to_docker_hub:
  #         requires:
  #           - publish_github_release
  #         context: ITU MiniTwit
  #         filters:
  #           branches:
  #             only:
  #               - master

  #     - apply_infrastructure:
  #         requires:
  #           - push_to_docker_hub
  #         context: ITU MiniTwit
  #         filters:
  #           branches:
  #             only:
  #               - master

  #     - apply_kubernetes:
  #         requires:
  #           - apply_infrastructure
  #         context: ITU MiniTwit
  #         filters:
  #           branches:
  #             only:
  #               - master